callerdir() {
	calledas="$1"
	calledasdir="$(dirname ${calledas})"
	if [ "${calledasdir}" = '.' ]; then
		if [ "${calledas%%/*}" = "${calledas}" ]; then
			calledasdir=''
		fi
	fi
	if [ "${calledasdir}" = '' ]; then
		calledasdir=$(abspath "${calledas}")
	fi
	echo "${calledasdir}"
}

setjavaenv() {
	if [ -z "${SMPE_JAVAHOME}" ]; then
		if [ -z "${JAVA_HOME}" ]; then
			javaloc=`whence java 2>/dev/null`
			if [ $? -eq 0 ]; then
	                        export SMPE_JAVAHOME="$(dirname ${javaloc})/../"
			else
	                    	echo "Unable to set SMPE_JAVAHOME. Please export SMPE_JAVAHOME before running"
	                        exit 16
			fi
		else
	            	export SMPE_JAVAHOME="${JAVA_HOME}"
		fi
	fi
	if [ -z "${SMPE_CLASSPATH}" ]; then
		if [ -d /usr/lpp/smp/classes ]; then
			export SMPE_CLASSPATH="/usr/lpp/smp/classes"
		else
	            	echo "Unable to set SMPE_CLASSPATH. Please export SMPE_CLASSPATH before running"
			exit 16
		fi
	fi
	if ! [ -d ${SMPE_JAVAHOME} ]; then
	    	echo "SMPE_JAVAHOME environment variable is defined to ${SMPE_JAVAHOME} but the directory does not exist. Please create directory or change environment variable."
		exit 16
	fi
	
	if ! [ -d ${SMPE_CLASSPATH} ]; then
	    	echo "SMPE_CLASSPATH environment variable is defined to ${SMPE_JAVAHOME} but the directory does not exist. Please create directory or change environment variable."
		exit 16
	fi
	
}

zbrewlog() {
	log_dir="${ZBREW_TMP}/zbrewlog"
	log_msg=$*
	log_time=$(date -u)
	echo "${log_time} ${log_msg}" >> ${log_dir}
}	

zbrewdeploy() {
	dir="$1"
	bom="$2"

	if [ "${bom}" = "" ] || ! [ -d "${dir}" ] || ! [ -f "${bom}" ]; then
		echo "Syntax: zbrewdeploy <directory> <bom>" >&2
		echo "Deploy the bill of materials to the specified directory" >&2
		return 8
	fi
	rm -rf "${dir}"
	mkdir -p "${dir}"
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "zbrewdeploy: Unable to make directory: ${dir}" >&2
		return $rc
	fi

	names=`cat "${bom}"`
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "zbrewdeploy: Unable to read bom file: ${bom}" >&2
		return $rc
	fi
	code="${names}"
	for c in ${code}; do
		path=${c%/*}
		if [ "${path}" != "${c}" ]; then
			mkdir -p "${dir}/${path}"
			rc=$?
			if [ $rc -gt 0 ]; then
				echo "zbrewdeploy: Unable to make directory: ${dir}/${path}" >&2
				return $rc
			fi
		fi
		cp -p "${c}" "${dir}/${c}"
		rc=$?
		if [ $rc -gt 0 ]; then
			echo "zbrewdeploy: Unable to copy file ${c} to file ${dir}/${c}" >&2
			return $rc
		fi
	done
	return 0	
}

	
zbrewtest() {
	lmsg="$1"
	lexpected="$2"
	lactual="$3"

	if [ "${lexpected}" != "${lactual}" ]; then
		echo "Test Failed. ${lmsg}" >&2
		lines=`echo "${lexpected}" | wc -l | xargs echo`
		if [ ${lines} -gt 1 ]; then
			fexpected=/tmp/$$.zbrewtest.expected
			factual=/tmp/$$.zbrewtest.actual
			echo "diff <expected> <actual>" >&2
			echo "${lexpected}" >${fexpected}
			echo "${lactual}" >${factual}
			diff ${fexpected} ${factual}
			rm -f ${fexpected} ${factual}
		else 
			echo "Expected: ${lexpected}" >&2
			echo "Actual: ${lactual}" >&2
		fi
		exit 16
	fi	
}

zbrewprops() {
	if [ $# -lt 3 ]; then
		echo "Syntax: zbrewprops <swname> <category> [<file>]+" >&2
		echo "where:" >&2
		echo "  <swname> is the software these properties are associated with" >&2
		echo "  <category> is the software category these properties are associated with" >&2
		echo "  <file> is a JSON properties file" >&2
		echo "Each key/value pair will be evaluated, creating a variable <key> with a value <value>" >&2
		return 16
	fi
	swname=$1
	shift 1
	category=$1
	shift 1
	for props in $*; do
		if [ -f "${props}" ]; then
			props=`readprops ${swname} ${category} <${props}`
			OLDIFS=$IFS; IFS="
		"
			line=0
			for p in $props; do
				line=$(($line+1))
				p=`echo "$p" | awk '!/#/ { print $0; }'`
				if [ "$p" != '' ]; then
					key="${p%%=*}"
					if [ "${key}" = "${p}" ]; then
						echo "The line ${p} does not have a valid key/value pair of the form <key>=<value>. Line ignored." >&2
					else
						# Evaluate the line in a child shell. If it has errors, report them, otherwise repeat
						(eval "$p" 2>/dev/null >/dev/null)
						if [ $? -gt 0 ]; then
							echo "The key/value pair '$p' could not be evaluated. Please correct line ${line}" >&2
							return 16
						fi
						val="${p#*=}"

						# Set the key only if it has not already been set
						cmd="${key}=\${${key}-${val}}" 
						eval "export ${cmd}"
					fi
				fi
			done
			IFS=$OLDIFS
		else
			echo "Unable to find properties file ${props}" >&2
			return 16
		fi
		if [ ${line} -eq 0 ]; then
			echo "No properties were read for swname: ${swname}, category: ${category}, file:${props}." >&2
			return 8
		fi
	done

	return 0
}

zbrewpropse() {
	zbrewprops $*
	if [ $? -gt 0 ]; then
		exit 4
	fi
	return 0
}

zbrewswinstalled() {
	sw=$(echo $1 | tr '[:lower:]' '[:upper:]');

	if [ "${sw}" = "" ]; then
		echo "zbrewswinstalled: Error - need to specify the software to check" >&2
		return 0
	fi
	csi="ZBREW_${sw}HLQ"
	eval "value=\${$csi}"
	if [ "${value}" = "" ] || [ "${value}" = "NONE" ]; then
		return 0
	fi
	return 1
}

a2e() {
	file="$1"
	tmpfile="${ZBREW_TMP}/ascii.$$"
	iconv -t IBM-1047 -f ISO8859-1 <"${file}" >"${tmpfile}"
	if [ $? -gt 0 ]; then
		return $?
	fi

	mv "${tmpfile}" "${file}"
	if [ $? -gt 0 ]; then
		return $?
	fi
	chtag -tc IBM-1047 "${file}"
	return $?
}

e2a() {
	file="$1"
	tmpfile="${ZBREW_TMP}/ascii.$$"
	iconv -f IBM-1047 -t ISO8859-1 <"${file}" >"${tmpfile}"
	if [ $? -gt 0 ]; then
		return $?
	fi

	mv "${tmpfile}" "${file}"
	if [ $? -gt 0 ]; then
		return $?
	fi
	chtag -tc ISO8859-1 "${file}"
	return $?
}

issueTSO() {
	cmd=$1
	tmpout="${ZBREW_TMP}/$$tso.out"
	tsocmd "${cmd}" >$tmpout 2>/dev/null
	rc=$?
	if [ $rc -gt 0 ]; then
		cat "${tmpout}" >&2
	fi
	rm -f "${tmpout}"
	return $rc
}

chk() {
	rc=$1
	msg="$2"

	if  [ $rc -eq 0 ]; then
		return 0
	fi
	echo "${msg}" >&2
	exit $rc
}

isinteger() {
	val=$1
	result=`echo "$1" | tr -d '[:digit:]'`
	if [ "${result}" = '' ] ; then 
		echo true
	else
		echo false
	fi
}

undefinedProperty() {
	val=$1
	if [ "${val}" = "" ] || [ "${val}" = "NONE" ]; then
		echo true
	else
		echo false
	fi
}
definedProperty() {
	negate=`undefinedProperty "$1"`
	if ${negate}; then
		echo false;
	else
		echo true
	fi
}

racfEnhancedGenericNamingInEffect() {
	racfState=`tsocmd "setropts list" 2>/dev/null | grep 'ENHANCED GENERIC NAMING'`
	if [ "${racfState}" = "ENHANCED GENERIC NAMING IS IN EFFECT" ]; then
		echo true
	else
		echo false
	fi
}

racfGroupExists() {
	tsocmd "LISTGRP $1" >/dev/null 2>/dev/null
	if [ $? -eq 0 ]; then
		echo true
	else
		echo false
	fi
}

racfDatasetProfileExists() {
	tsocmd "LISTDSD DATASET('$1')" >/dev/null 2>/dev/null
	if [ $? -eq 0 ]; then
		echo true
	else
		echo false
	fi
}

racfProfileExists() {
	tsocmd "RLIST "$1" "$2"" >/dev/null 2>/dev/null
	if [ $? -eq 0 ]; then
		echo true
	else
		echo false
	fi
}

racfUserExists() {
	user="$1"
	tsocmd "listuser ${user}" >/dev/null 2>&1
	if [ $? -gt 0 ]; then
		echo false
	else
		echo true
	fi
}

racfPermitUsers() {
	class="$1"
	profile="$2"
	access="$3"
	shift 3
	users="$*"

	if `undefinedProperty "${users}"`; then
		return 0
	fi

	for user in $users; do
		if `racfUserExists "${user}"` ; then
			tsocmd "PERMIT ${profile} CLASS(${class}) DELETE ID(${user})" >/dev/null 2>/dev/null
			issueTSO "PERMIT ${profile} CLASS(${class}) ACCESS(${access}) ID(${user})"
			chk "$?" "Unable to permit ${profile} class(${class}) access(${access}) id(${user})"
		fi
	done
	return 0
}

racfActivateAndShareClasses() {
	classes="$*"

	for class in $classes; do
		issueTSO "SETROPTS CLASSACT(${class}) RACLIST(${class})"
		chk "$?" "Unable to activate and share ${class}"
	done
	return 0
}

racfSetGenericClasses() {
	classes="$*"

	for class in $classes; do
		issueTSO "SETROPTS GENERIC(${class})"
		chk "$?" "Unable to set class ${class} as generic"
	done
	return 0
}

racfRefreshClasses() {
	classes="$*"

	for class in $classes; do
		issueTSO "SETROPTS RACLIST(${class}) REFRESH"
		chk "$?" "Unable to refresh class ${class}"
	done
	return 0
}

racfSubjectsDN() {
	commonName="$1"
	tv="${ZBREW_X509DN_T}"	
	ouv="${ZBREW_X509DN_OU}"	
	ov="${ZBREW_X509DN_O}"	
	lv="${ZBREW_X509DN_L}"	
	spv="${ZBREW_X509DN_SP}"	
	cv="${ZBREW_X509DN_C}"	

	subjectsDN="SUBJECTSDN(CN('${commonName}')"
	if `definedProperty "${tv}"`; then
		subjectsDN="${subjectsDN} T('${tv}')"
	fi
	if `definedProperty "${ouv}"`; then
		subjectsDN="${subjectsDN} OU('${ouv}')"
	fi
	if `definedProperty "${ov}"`; then
		subjectsDN="${subjectsDN} O('${ov}')"
	fi
	if `definedProperty "${lv}"`; then
		subjectsDN="${subjectsDN} L('${lv}')"
	fi
	if `definedProperty "${spv}"`; then
		subjectsDN="${subjectsDN} SP('${spv}')"
	fi
	if `definedProperty "${cv}"`; then
		subjectsDN="${subjectsDN} C('${cv}')"
	fi
	subjectsDN="${subjectsDN})"
	echo "${subjectsDN}"
	return 0
}

jclRemoveAddOrReplaceDD() {
	jverb="$1"
	jcl="$2"
	step="$3"
	dd="$4"

	if [ "${jverb}" = "ADD" ] || [ "${jverb}" = "REPLACE" ] ; then
		dataset="$5"
	fi

#
# Extract the contents of the STEP ${step} into stepText 
#
	start=`echo "${jcl}" | awk -vstep=$step ' /\/\/[A-Z0-9\$#@]+[ ]+EXEC / { if (substr($1,3) == step) { print NR; exit 0 }}'`
	if [ "${start}" = '' ]; then
		echo "No step named ${step} found in JCL." >&2
		return 4
	fi
	startM1=`expr $start - 1`
	rest=`echo "${jcl}" | tail +${start}`
	end=`echo "${rest}" | tail +2 | awk ' /\/\/[A-Z0-9\$#@]+[ ]+EXEC / { print NR; exit 0 }'`

	if [ "${end}" = '' ]; then
		end=`echo "${rest}" | wc -l`
		end=`expr $end + 1` # because the end is one line after the end of the file
		afterStep=''
	else
		end=`expr $end + 1` # because end did not include the first line
		afterStep=`echo "${rest}" | tail +${end}`
	fi

	endM1=`expr $end - 1`
	stepText=`echo "${rest}" | head -n ${endM1}`
	if [ ${start} -gt 1 ]; then
		beforeStep=`echo "${jcl}" | head -n ${startM1}`
	else
		beforeStep=''
	fi

#
# Extract the DDName from the step
#
	start=`echo "${stepText}" | awk -vdd=$dd ' /\/\/[A-Z0-9\$#@]+[ ]+/ { if (substr($1,3) == dd) { print NR; exit 0 }}'`
	if [ "${start}" = '' ]; then
		#
		# If DDName was not there, add it to the end of the step, if operation was not 'REMOVE'
		echo "${beforeStep}"
		echo "${stepText}"
		if [ "${jverb}" != "REMOVE" ]; then
			echo "//${dd} DD DSN=${dataset},DISP=SHR"
		fi
		echo "${afterStep}"
		return 0
	fi
	startM1=`expr $start - 1`
	rest=`echo "${stepText}" | tail +${start}`
	end=`echo "${rest}" | tail +2 | awk ' /\/\/[A-Z0-9\$#@]+[ ]+/ { print NR; exit 0 }'`

	if [ "${end}" = '' ]; then
		end=`echo "${rest}" | wc -l`
		end=`expr $end + 1` # because the end is one line after the end of the file
		afterDD=''
	else
		end=`expr $end + 1` # because end did not include the first line 
		afterDD=`echo "${rest}" | tail +${end}`
	fi

	endM1=`expr $end - 1`
	if [ ${start} -gt 1 ]; then
		beforeDD=`echo "${stepText}" | head -n ${startM1}`
	else
		beforeDD=''
	fi

#	echo "Before Step:"
	if [ "${beforeStep}" != '' ]; then		
		echo "${beforeStep}"
	fi
#	echo "Before DD:"
	if [ "${beforeDD}" != '' ]; then		
		echo "${beforeDD}"
	fi

	if [ "${jverb}" = "ADD" ]; then
		ddText=`echo "${rest}" | head -n ${endM1}`
		#
		# Add the new dataset to the TOP of the DDName concatenation
		# MSF - make this prettier by putting the right number of spaces after the //
		#
		ddlen=`echo "//$dd" | wc -c | xargs echo` # length includes 'new line' 
		secondLineDDText=`echo "${rest}" | head -1 | cut -c ${ddlen}-80`

		#	echo "DD:"
		echo "//${dd} DD DSN=${dataset},DISP=SHR"
		echo "//${secondLineDDText}"
		echo "${ddText}" | tail +2	
	elif [ "${jverb}" = "REPLACE" ]; then
		echo "//${dd} DD DSN=${dataset},DISP=SHR"
	fi

#	echo "After DD:"
	if [ "${afterDD}" != '' ]; then		
		echo "${afterDD}"
	fi
#	echo "After Step:"
	if [ "${afterStep}" != '' ]; then		
		echo "${afterStep}"
	fi
	return 0
}

jclAddDatasetToDD() {
	jclRemoveAddOrReplaceDD "ADD" "$1" "$2" "$3" "$4"
	return $?
}

jclRemoveDD() {
	jclRemoveAddOrReplaceDD "REMOVE" "$1" "$2" "$3" 
	return $?
}

jclReplaceDD() {
	jclRemoveAddOrReplaceDD "REPLACE" "$1" "$2" "$3" "$4"
	return $?
}
		
parmlibAddOrRemoveDataset() {
	pverb="$1"
	ds="$2"
	parmlib=`pparm 2>/dev/null`
	if [ $? -gt 0 ]; then
		return $?
	fi
	if [ "${pverb}" = "ADD" ]; then
		parmlib="${ds}
${parmlib}"
	fi
	newparmlibhfs=/tmp/parmlib.$$.txt
	newparmlibds=`mvstmp`
	dtouch "${newparmlibds}"
	if [ $? -gt 0 ]; then
		return $?
	fi
	for libds in $parmlib; do 
		if [ "${pverb}" = "REMOVE" ] && [ "${libds}" = "${ds}" ]; then
			continue;
		fi
		if [ "${libds}" = "SYS1.PARMLIB" ]; then
			# SETLOAD will append SYS1.PARMLIB automatically
			continue;
		fi
		dls -l "$libds" | awk ' { printf("%-8s %-44s %6s\n","PARMLIB", $1, $5); }' >>"${newparmlibhfs}"
		if [ $? -gt 0 ]; then
			return $?
		fi
	done
	#a2e "${newparmlibhfs}"
	#if [ $? -gt 0 ]; then
	#	return $?
	#fi
	dcp "${newparmlibhfs}" "${newparmlibds}(LOAD@@)"	
	if [ $? -gt 0 ]; then
		return $?
	fi
	rm "${newparmlibhfs}"

	opercmd "SETLOAD @@,PARMLIB,DSN=${newparmlibds}" 2>/dev/null >/dev/null
	if [ $? -gt 0 ]; then
		echo "Unable to update parmlib. Temporary dataset: ${newparmlibds} retained" >&2
		return $?
	fi
	drm "${newparmlibds}"
	return 0 	
}

parmlibRemoveDataset() {
	parmdataset=$(echo $1 | tr '[:lower:]' '[:upper:]');
	parmlibAddOrRemoveDataset "REMOVE" "${parmdataset}"
	return $?
}

parmlibAddDataset() {
	parmdataset=$(echo $1 | tr '[:lower:]' '[:upper:]');
	parmlibAddOrRemoveDataset "ADD" "${parmdataset}"
	return $?
}

curllname() {
	opout="${ZBREW_TMP}/curllname.$$.out"
	llaresults=`opercmd 'D LLA' 2>${opout}`
	llaerr=`cat "${opout}"`
	rm -f "${opout}"

	lladatasets=`echo "$llaresults" | awk 'BEGIN { header=0; } { if (header) { print substr($0,60,44) } } / ENTRY/ {header=1}'`
	if [ $? -gt 0 ]; then
		echo "${laerr}" >&2
		return $?
	fi
	curllname=`echo "$llaresults" | grep 'LNKLST SET' | awk ' { print $3; }'`
	if [ $? -gt 0 ]; then
		echo "${laerr}" >&2
		return $?
	fi
	echo "${curllname}"
	return 0
}

nextllname() {
	cur="$1"
	pfx="$2"

	if [ "${pfx}" = '' ]; then
		echo "Syntax: nextllname <cur> <pfx>" >&2
		exit 16
	fi
	num=${cur#${pfx}*}
	if [ "${num}" = "${cur}" ]; then
		echo "${pfx}1"
	else
            	if `isinteger ${num}`; then
                        next=`expr $num + 1`
                        echo "${pfx}${next}"
		else
                    	echo "${pfx}1"
		fi
	fi
}

llnameUndefined() {
	name="$1"

	opercmd "D PROG,LNKLST,NAME=${name}" 2>/dev/null | grep -q CSV480I
	if [ $? -eq 0 ]; then
		echo true
	else
		echo false
	fi
}

llaAddOrRemoveDatasets() {
	#set -x
	lverb=$(echo $1 | tr '[:lower:]' '[:upper:]');
	shift
	datasets=$(echo $* | tr '[:lower:]' '[:upper:]');

	if [ "${datasets}" = '' ]; then
		echo "Syntax: llaAddOrRemoveDatasets ADD|REMOVE [<dataset>]+" >&2
		exit 16
	fi

	TMPCSV=`mvstmp`

	dtouch "${TMPCSV}"
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "Unable to allocate temporary dataset ${TMPCSV}" >&2
		return $rc
	fi

	curllname=`curllname`
	while true ; do
		nextllname=`nextllname "${curllname}" "ZBREW"`
		if `llnameUndefined "${nextllname}"` ; then	
			break;
		fi
		curllname="${nextllname}"
	done

	opout="${ZBREW_TMP}/llaAddRemoveDatasets.$$.out"
	rm -f "${opout}"

	opercmd "SETPROG LNKLST DEFINE NAME(${nextllname}) COPYFROM(CURRENT)" >>${opout} 2>&1
	if [ "${lverb}" = "ADD" ]; then
		for dataset in ${datasets}; do
			opercmd "SETPROG LNKLST ADD NAME(${nextllname}) DSNAME(${dataset})" >>${opout} 2>&1
		done
	elif [ "${lverb}" = "REMOVE" ]; then
		for dataset in ${datasets}; do
			opercmd "SETPROG LNKLST DELETE NAME(${nextllname}) DSNAME(${dataset})" >>${opout} 2>&1
		done
	else
		echo "VERB must be ADD or REMOVE. ${lverb} specified." >&2
		return 8
	fi
	opercmd "SETPROG LNKLST ACTIVATE NAME(${nextllname})" >>${opout} 2>&1
	llerr=`cat "${opout}"`
	rm -f "${opout}"

	if [ "${lverb}" = "REMOVE" ]; then
		parmlibAddDataset "${TMPCSV}"
		rc=$?
		if [ $rc -gt 0 ]; then
			echo "Unable to update parmlib to add dataset ${TMPCSV}" >&2
			echo "${llerr}" >&2
			return $rc
		fi
		decho "/* Remove a set of Datasets */" "${TMPCSV}(CSVLLA@@)"
		for dataset in ${datasets}; do
			decho -a "REMOVE(${dataset})" "${TMPCSV}(CSVLLA@@)"
		done
		rc=$?
		if [ $rc -gt 0 ]; then
			echo "Unable to update temporary member CSVLLA@@ in dataset ${TMPCSV}" >&2
			return $rc
		fi

		opercmd "MODIFY LLA,UPDATE=@@" >>${opout} 2>&1
		opercmd "SETPROG LNKLST UNALLOCATE" >>${opout} 2>&1
		opercmd "SETPROG LNKLST ALLOCATE" >>${opout} 2>&1
		llerr=`cat "${opout}"`
		rm -f "${opout}"

		parmlibRemoveDataset "${TMPCSV}"
		rc=$?
		if [ $rc -gt 0 ]; then
			echo "Unable to update parmlib to remove dataset ${TMPCSV}" >&2
			echo "${llerr}" >&2
			return $rc
		fi
	fi
	return 0
}

llaRemoveDatasets() {
	llaAddOrRemoveDatasets "REMOVE" "$1"
        return $?
}

llaAddDatasets() {
	llaAddOrRemoveDatasets "ADD" "$1"
        return $?
}

supportsCICS() {
	return `definedProperty "$ZBREW_DFHHLQ"`
}

cicsSYSINUpdate() {
	sysin="$1"
	cicskey="$2"
	cicsvalue="$3"

	case ${cicskey} in
		GRPLIST)
			echo "${sysin}"	| awk -vcicsvalue=$cicsvalue '
				BEGIN {
					found=0;
				}
				/^[ ]*GRPLIST/ {
					openParen=index($1,"(")
					closeParen=index($1,")")
					if (openParen > 0 && closeParen > 0) {
						origlist=substr($1,openParen+1,closeParen-openParen-1)
					} else {
						equals=index($1,"=")
						if (equals == 0) {
							exit(16);
						}
						origlist=substr($1,equals+1)
					}
					found=1
					print "GRPLIST=("cicsvalue","origlist")"
					next
				}
				/^\.END/ {
					if (!found) {
						print "GRPLIST="cicsvalue
					}
				}
				// {
					print
				}
			'
			;;

		SEC|XTRAN|XCMD|XDCT|XFCT|XHFS|XJCT|XPPT|XPSB|XPTKT|XRES|GMTRAN)
			# YES or NO is the only valid value, except for GMTRAN where it is a transaction
			echo "${sysin}" | awk -vcicsvalue=$cicsvalue -vcicskey=$cicskey '
				BEGIN {
					found=0;
				}
				/^\.END/ {
					if (!found) {
						print cicskey"="cicsvalue
					}
				}
				{
					equals=index($1,"=")
					if (equals != 0) {
						origkey=substr($1,1,equals-1)
						if (origkey==cicskey) {
							found=1
							print cicskey"="cicsvalue
						} else {
							print
						}
					} else {
						print
					}
                                }
                        '
			;;
		*)
			echo "Unexpected CICS parameter ${cicskey} passed to cicsSYSINUpdate" >&2
			return 4
			;;
	esac
	return 0
}

stopCICS() {
	region=$(echo $1 | tr '[:lower:]' '[:upper:]')

	#
	# Shutdown any current CICS regions running
	# Look for either a 'not active' or 'ended' message
	#
	timestamp=`opercmd "modify ${region},cemt p shut" 2>/dev/null | tail -1 | awk '{ print $2 " " $3; }'`
	while [ true ]; do
		pout=`pcon -s ${timestamp} 2>/dev/null`
		echo "${pout}" | grep "IEE341I ${region}" | grep "NOT ACTIVE"
		if [ $? -eq 0 ]; then         
			break;
		fi
	        echo "${pout}" | grep "HASP395 ${region} ENDED" 
		if [ $?	-eq 0 ]; then      
			break;
		fi
		sleep 1
	done
	return 0
}

startCICS() {
	region=$(echo $1 | tr '[:lower:]' '[:upper:]')

	#
	# Shutdown any current CICS regions running
	# Look for either a 'not active' or 'ended' message
	#
	timestamp=`opercmd "start ${region}" 2>/dev/null | tail -1 | awk '{ print $2 " " $3; }'`
	while [ true ]; do
		pout=`pcon -s ${timestamp} 2>/dev/null`
		echo "${pout}" | grep "DFHSI1517 ${region}"
		if [ $? -eq 0 ]; then         
			return 0;
		fi
		echo "${pout}" | egrep "IEE122I|DFHXS1106"
		if [ $? -eq 0 ]; then         
			return 1;
		fi
		sleep 1
	done
}

#
# VSAM dataset exists?
#
vsamexists() {
	dataset=$(echo $1 | tr '[:lower:]' '[:upper:]');
	echo "  LISTCAT ENTRIES(${dataset})" | mvscmdauth --pgm=idcams --sysprint=dummy --sysin=stdin
	rc=$?
	if [ $rc -eq 0 ]; then
		echo true
	else
		echo false
	fi
}

#
# Create a copy of a VSAM dataset
#
vsamcp() {
#set -x
	src=$(echo $1 | tr '[:lower:]' '[:upper:]');
	dst=$(echo $2 | tr '[:lower:]' '[:upper:]');

	if [ "${dst}" = '' ]; then
		echo "Syntax: vsamcp <src> <dst>" >&2
		return 4
	fi
	sysprint=/tmp/vsampcp.$$.out
	touch "${sysprint}"
	mvscmdauth --pgm=ADRDSSU --sysprint="${sysprint}" --sysin=stdin <<-zz
          COPY DS(INCLUDE( -
            ${src})) -
            CAN SHR CATALOG -
            RENAMEU(${src},${dst})
	zz
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "VSAM Copy failed with rc:$rc" >&2
		cat "${sysprint}" >&2
	fi
	rm -rf "${sysprint}"
	return $?
}
