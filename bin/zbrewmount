#!/bin/sh

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
Syntax:
	mountpt {-m|-u} {-s|-t} [-v] sw
Notes:
    -m:             to mount
    -u:             to unmount
    -s:             action on source
    -t:             action on target
    [optional] -v:  enable verbose
    sw:             product ID
" >&2
    exit 8
}

# ---------------------------------------------------------------------
# some options cannot be appeared in multiple times or combining with others
# ---------------------------------------------------------------------
function opt_combine_repeat_chk
{
    if [ "$1" = "-mu" ]; then
        if [ ! -z $unmount ] || [ ! -z $mount ]; then
            echo "**ERROR: cannot have multiple -m and -u or combining them" >&2
            syntax
        fi
    elif [ "$1" = "-st" ]; then
        if [ ! -z $srcmode ] || [ ! -z $tgtmode ]; then
            echo "**ERROR: cannot have multiple -s and -t or combining them" >&2
            syntax
        fi
    fi
}


# ---------------------------------------------------------------------
# --- read startup arguments
# ---------------------------------------------------------------------
function read_args
{
count=0

for arg in $*
do
    if [ "$arg" = "-m" ]; then
        opt_combine_repeat_chk -mu
        mount="true"
        count=$count+1
    elif [ "$arg" = "-u" ]; then
        opt_combine_repeat_chk -mu
        unmount="true"
        count=$count+1
    fi
  
    if [ "$arg" = "-s" ]; then
        opt_combine_repeat_chk -st
        srcmode="true"
        count=$count+1
    elif [ "$arg" = "-t" ]; then
        opt_combine_repeat_chk -st
        tgtmode="true"
        count=$count+1
    fi
  
    if [ "$arg" = "-v" ]; then
        verbose="true"
        count=$count+1
    fi

    if [ "$(echo $arg | cut -c1)" = "-" ] && \
       [ "$arg" != "-m" ] && \
       [ "$arg" != "-u" ] && \
       [ "$arg" != "-s" ] && \
       [ "$arg" != "-t" ] && \
       [ "$arg" != "-v" ]; then
        echo "**WARNING: ignored invalid argument $arg"
        echo
    fi
done

if [ -z "$mount" ] && [ -z "$unmount" ]; then
    echo "** ERROR: must specify mount -m or unmount -u option" >&2
    syntax
    exit 8
fi

if [ -z "$srcmode" ] && [ -z "$tgtmode" ]; then
    echo "** ERROR: must specify -s or -t option" >&2
    syntax
    exit 8
fi

shift $count
sw=$1
if [ -z $sw ]; then
    echo "**ERROR: sw name must be specified" >&2
    syntax
    exit 8
fi
ussname=$(echo ${sw} | tr '[:upper:]' '[:lower:]');
zosname=$(echo ${sw} | tr '[:lower:]' '[:upper:]');
prefix=`echo "${ussname}" | awk '{ print substr($1, 0, 3) }'`
bom_file="${ZBREW_REPOROOT}/zbrew-${prefix}/${ussname}/${ussname}bom.json"
}

function run_unmount {
    mountpoints=$1
    zbrew_zfsroot=$2
    zbrew_hlq=$3
    zosname=$4

    for mount in $(echo $mountpoints | sed "s/,/ /g"); do
        absmount="${zbrew_zfsroot}${mount#*:}"
        if [ ! -z $verbose ]; then
            echo "**INFO: Attempting to unmount $absmount"
        fi
        if [ -d "${absmount}" ]; then
            /usr/sbin/unmount -R "${absmount}" 2>/dev/null
        fi
    done
    
    if [ ! -z $verbose ]; then
        echo "**INFO: Attempting to remove ${zbrew_hlq}${zosname}*.**"
    fi
    drm -f "${zbrew_hlq}${zosname}*.**"
}

function run_mount {
    mountpoints=$1
    zbrew_zfsroot=$2
    zbrew_hlq=$3

    for mount in $(echo $mountpoints | sed "s/,/ /g"); do
        relds="${zosname}.${mount%%:*}"	    #${mount%%:*} strips everything after first occurance of ':' including ':'
        relzfs="${mount#*:}"    #${mount#*:} strips everything before first occurance of ':' including ':'
        absmount="${zbrew_zfsroot}${relzfs}"

        mkdir -p -m 755 "${absmount}"
        chk $? "**ERROR: making directory ${absmount}"

        if [ ! -z $verbose ]; then
            echo "**INFO: Attempting to mount $absmount"
        fi
        
        /usr/sbin/mount -t zfs -f "${zbrew_hlq}${relds}" "${absmount}"
        chk $? "**ERROR: unable to mount directory: ${absmount} at ${zbrew_hlq}${relds}"
    done
}


# ---------------------------------------------------------------------
# --- main
# ---------------------------------------------------------------------
. zbrewsetenv

read_args $*

if ! [ -f "${bom_file}" ]; then
	echo "**ERROR: unable to find BOM file: ${bom_file}" >&2
	exit 8
fi

readbom_out=`readbom $ussname <$bom_file`
chk $? "**ERROR: readbom failed"

mountpoints=`echo "${readbom_out}" | awk '($2 == "ZFS") {print $1 ":" $7}'`
mountpoints=$(echo $mountpoints | tr ' ' ',')

# different scenarios
if [ ! -z $mount ] && [ ! -z $srcmode ]; then
    run_mount $mountpoints $ZBREW_SRC_ZFSROOT $ZBREW_SRC_HLQ
elif [ ! -z $mount ] && [ ! -z $tgtmode ]; then
    run_mount $mountpoints $ZBREW_TGT_ZFSROOT $ZBREW_TGT_HLQ
elif [ ! -z $unmount ] && [ ! -z $srcmode ]; then
    run_unmount $mountpoints $ZBREW_SRC_ZFSROOT $ZBREW_SRC_HLQ $zosname
elif [ ! -z $unmount ] && [ ! -z $tgtmode ]; then
    run_unmount $mountpoints $ZBREW_TGT_ZFSROOT $ZBREW_TGT_HLQ $zosname
fi

exit 0